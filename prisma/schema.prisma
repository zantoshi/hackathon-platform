// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String      @id @default(cuid())
  name                  String?
  email                 String?     @unique
  gamertag              String
  role                  Role        @default(USER)
  hackathons            Hackathon[]
  teams                 Team[]
  emailVerified         Boolean?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  isVerified            Boolean?
  lightningAddress      String?
  publicBio             String?
  publicStaticCharge    String?
  social                Json?
  balance               String?
  remainingAmountLimits Json?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String
  teamMembers String
  teamAvatar  String

  projects      Project[]
  registrations HackathonRegistration[]

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String
}

model Hackathon {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title           String
  description     String
  benefits        String
  rules           String
  judgingCriteria String

  firstPlacePrize  String
  secondPlacePrize String
  thirdPlacePrize  String

  projects      Project[]
  registrations HackathonRegistration[]

  published Boolean @default(false)
  creator   User    @relation(fields: [creatorId], references: [id])
  creatorId String

  startDate String
  endDate   String
}

model HackathonRegistration {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
  hackathonId String
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      String

  // TODO:
  // Add creatorId to make it easier to find registrations.
  // creator   User   @relation(fields: [creatorId], references: [id])
  // creatorId String

  // @@unique([creatorId, teamId, hackathonId])

  @@unique([teamId, hackathonId])
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                String
  description         String
  loomLink            String
  pitchLink           String
  projectResourceLink String
  comments            String?

  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
  hackathonId String

  team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  @@unique([teamId, hackathonId])
}

model Contact {
  id        String @id @default(cuid())
  name      String
  email     String
  company   String
  comments  String
}

model Sponsors {
  id        String @id @default(cuid())
  name      String
  email     String
  company   String
}

enum Role {
  USER
  ADMIN
  JUDGE
}
